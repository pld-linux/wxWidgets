--- wxWidgets-2.8.12/src/common/appbase.cpp.orig	2011-03-22 12:59:40.000000000 +0100
+++ wxWidgets-2.8.12/src/common/appbase.cpp	2012-09-30 08:02:00.981833952 +0200
@@ -424,7 +424,7 @@
         msg.Printf(_T("Mismatch between the program and library build versions detected.\nThe library used %s,\nand %s used %s."),
                    lib.c_str(), progName.c_str(), prog.c_str());
 
-        wxLogFatalError(msg.c_str());
+        wxLogFatalError("%s", msg.c_str());
 
         // normally wxLogFatalError doesn't return
         return false;
--- wxWidgets-2.8.12/src/common/fs_mem.cpp.orig	2011-03-22 12:59:41.000000000 +0100
+++ wxWidgets-2.8.12/src/common/fs_mem.cpp	2012-09-30 10:11:49.745004943 +0200
@@ -174,9 +174,7 @@
 
     if (m_Hash -> Get(filename) != NULL)
     {
-        wxString s;
-        s.Printf(_("Memory VFS already contains file '%s'!"), filename.c_str());
-        wxLogError(s);
+        wxLogError(_("Memory VFS already contains file '%s'!"), filename.c_str());
         return false;
     }
     else
@@ -226,9 +224,7 @@
     if (m_Hash == NULL ||
         m_Hash -> Get(filename) == NULL)
     {
-        wxString s;
-        s.Printf(_("Trying to remove file '%s' from memory VFS, but it is not loaded!"), filename.c_str());
-        wxLogError(s);
+        wxLogError(_("Trying to remove file '%s' from memory VFS, but it is not loaded!"), filename.c_str());
     }
 
     else
@@ -261,7 +261,7 @@
         wxString s;
         s.Printf(_("Failed to store image '%s' to memory VFS!"), filename.c_str());
         wxPrintf(wxT("'%s'\n"), s.c_str());
-        wxLogError(s);
+        wxLogError("%s", s.c_str());
     }
 }
 
--- wxWidgets-2.8.12/src/common/file.cpp.orig	2011-03-22 12:59:40.000000000 +0100
+++ wxWidgets-2.8.12/src/common/file.cpp	2012-09-30 08:19:02.785145988 +0200
@@ -513,7 +513,7 @@
     if ( chmod( (const char*) m_strTemp.fn_str(), mode) == -1 )
     {
 #ifndef __OS2__
-        wxLogSysError(_("Failed to set temporary file permissions"));
+        wxLogSysError("%s", _("Failed to set temporary file permissions"));
 #endif
     }
 #endif // Unix
--- wxWidgets-2.8.12/src/common/fileconf.cpp.orig	2011-03-22 12:59:41.000000000 +0100
+++ wxWidgets-2.8.12/src/common/fileconf.cpp	2012-09-30 08:20:45.761810510 +0200
@@ -508,7 +508,7 @@
 
             if ( err != wxSTREAM_NO_ERROR && err != wxSTREAM_EOF )
             {
-                wxLogError(_("Error reading config options."));
+                wxLogError("%s", _("Error reading config options."));
                 break;
             }
         }
@@ -1043,7 +1043,7 @@
 
   if ( !file.IsOpened() )
   {
-    wxLogError(_("can't open user configuration file."));
+    wxLogError("%s", _("can't open user configuration file."));
     return false;
   }
 
@@ -1057,13 +1057,13 @@
 
   if ( !file.Write(filetext, *m_conv) )
   {
-    wxLogError(_("can't write user configuration file."));
+    wxLogError("%s", _("can't write user configuration file."));
     return false;
   }
 
   if ( !file.Commit() )
   {
-      wxLogError(_("Failed to update user configuration file."));
+      wxLogError("%s", _("Failed to update user configuration file."));
 
       return false;
   }
@@ -1090,7 +1090,7 @@
         wxCharBuffer buf(line.mb_str(conv));
         if ( !os.Write(buf, strlen(buf)) )
         {
-            wxLogError(_("Error saving user configuration data."));
+            wxLogError("%s", _("Error saving user configuration data."));
 
             return false;
         }
--- wxWidgets-2.8.12/src/common/filename.cpp.orig	2011-03-22 12:59:41.000000000 +0100
+++ wxWidgets-2.8.12/src/common/filename.cpp	2012-09-30 08:26:13.781803673 +0200
@@ -859,7 +859,7 @@
 
     if ( path.empty() )
     {
-        wxLogSysError(_("Failed to create a temporary file name"));
+        wxLogSysError("%s", _("Failed to create a temporary file name"));
     }
     else
     {
@@ -894,7 +894,7 @@
             //        fails, though of course it should be protected against
             //        possible infinite looping too.
 
-            wxLogError(_("Failed to open temporary file."));
+            wxLogError("%s", _("Failed to open temporary file."));
 
             path.clear();
         }
--- wxWidgets-2.8.12/src/common/filefn.cpp.orig	2011-03-22 12:59:41.000000000 +0100
+++ wxWidgets-2.8.12/src/common/filefn.cpp	2012-09-30 09:03:28.965090416 +0200
@@ -1513,7 +1513,7 @@
 
     if ( !ok )
     {
-        wxLogSysError(_("Failed to get the working directory"));
+        wxLogSysError("%s", _("Failed to get the working directory"));
 
         // VZ: the old code used to return "." on error which didn't make any
         //     sense at all to me - empty string is a better error indicator
--- wxWidgets-2.8.12/src/common/init.cpp.orig	2011-03-22 12:59:41.000000000 +0100
+++ wxWidgets-2.8.12/src/common/init.cpp	2012-09-30 09:06:52.951752832 +0200
@@ -237,7 +237,7 @@
 
     if ( !wxModule::InitializeModules() )
     {
-        wxLogError(_("Initialization failed in post init, aborting."));
+        wxLogError("%s", _("Initialization failed in post init, aborting."));
         return false;
     }
 
--- wxWidgets-2.8.12/src/common/stopwatch.cpp.orig	2011-03-22 12:59:42.000000000 +0100
+++ wxWidgets-2.8.12/src/common/stopwatch.cpp	2012-09-30 09:13:41.768410978 +0200
@@ -228,7 +228,7 @@
     if (( t0 != (time_t)-1 ) && ( t1 != (time_t)-1 ))
         return (long)difftime(t1, t0) + (60 * 60 * 24 * 4);
 
-    wxLogSysError(_("Failed to get the local system time"));
+    wxLogSysError("%s", _("Failed to get the local system time"));
     return -1;
 }
 
@@ -286,7 +286,7 @@
     }
     else
     {
-        wxLogError(_("wxGetTimeOfDay failed."));
+        wxLogError("%s", _("wxGetTimeOfDay failed."));
         return 0;
     }
 #elif defined(HAVE_FTIME)
--- wxWidgets-2.8.12/src/common/tarstrm.cpp.orig	2011-03-22 12:59:42.000000000 +0100
+++ wxWidgets-2.8.12/src/common/tarstrm.cpp	2012-09-30 09:40:58.075043539 +0200
@@ -790,7 +790,7 @@
     while (!done) {
         m_hdr->Read(*m_parent_i_stream);
         if (m_parent_i_stream->Eof())
-            wxLogError(_("incomplete header block in tar"));
+            wxLogError("%s", _("incomplete header block in tar"));
         if (!*m_parent_i_stream)
             return wxSTREAM_READ_ERROR;
         m_offset += TAR_BLOCKSIZE;
@@ -813,7 +813,7 @@
         if (m_sumType == SUM_SIGNED)
             ok = chksum == m_hdr->Sum(true);
         if (!ok) {
-            wxLogError(_("checksum failure reading tar header block"));
+            wxLogError("%s", _("checksum failure reading tar header block"));
             return wxSTREAM_READ_ERROR;
         }
 
@@ -986,7 +986,7 @@
     }
 
     if (!ok || recPos < len || size != lastread) {
-        wxLogWarning(_("invalid data in extended tar header"));
+        wxLogWarning("%s", _("invalid data in extended tar header"));
         return false;
     }
 
@@ -996,7 +996,7 @@
 wxFileOffset wxTarInputStream::OnSysSeek(wxFileOffset pos, wxSeekMode mode)
 {
     if (!IsOpened()) {
-        wxLogError(_("tar entry not open"));
+        wxLogError("%s", _("tar entry not open"));
         m_lasterror = wxSTREAM_READ_ERROR;
     }
     if (!IsOk())
@@ -1018,7 +1018,7 @@
 size_t wxTarInputStream::OnSysRead(void *buffer, size_t size)
 {
     if (!IsOpened()) {
-        wxLogError(_("tar entry not open"));
+        wxLogError("%s", _("tar entry not open"));
         m_lasterror = wxSTREAM_READ_ERROR;
     }
     if (!IsOk() || !size)
@@ -1037,7 +1037,7 @@
     } else if (!m_parent_i_stream->IsOk()) {
         // any other error will have been reported by the underlying stream
         if (m_parent_i_stream->Eof())
-            wxLogError(_("unexpected end of file"));
+            wxLogError("%s", _("unexpected end of file"));
         m_lasterror = wxSTREAM_READ_ERROR;
     }
 
@@ -1371,7 +1371,7 @@
     }
 
     if (sizePos == wxInvalidOffset || !m_hdr->SetOctal(TAR_SIZE, m_pos)) {
-        wxLogError(_("incorrect size given for tar entry"));
+        wxLogError("%s", _("incorrect size given for tar entry"));
         m_lasterror = wxSTREAM_WRITE_ERROR;
         return false;
     }
@@ -1492,7 +1492,7 @@
 wxFileOffset wxTarOutputStream::OnSysSeek(wxFileOffset pos, wxSeekMode mode)
 {
     if (!IsOpened()) {
-        wxLogError(_("tar entry not open"));
+        wxLogError("%s", _("tar entry not open"));
         m_lasterror = wxSTREAM_WRITE_ERROR;
     }
     if (!IsOk() || m_datapos == wxInvalidOffset)
@@ -1514,7 +1514,7 @@
 size_t wxTarOutputStream::OnSysWrite(const void *buffer, size_t size)
 {
     if (!IsOpened()) {
-        wxLogError(_("tar entry not open"));
+        wxLogError("%s", _("tar entry not open"));
         m_lasterror = wxSTREAM_WRITE_ERROR;
     }
     if (!IsOk() || !size)
--- wxWidgets-2.8.12/src/common/zstream.cpp.orig	2011-03-22 12:59:43.000000000 +0100
+++ wxWidgets-2.8.12/src/common/zstream.cpp	2012-09-30 09:47:40.141701824 +0200
@@ -146,7 +146,7 @@
       flags = wxZLIB_ZLIB;
     }
     else {
-      wxLogError(_("Gzip not supported by this version of zlib"));
+      wxLogError("%s", _("Gzip not supported by this version of zlib"));
       m_lasterror = wxSTREAM_READ_ERROR;
       return;
     }
@@ -173,7 +173,7 @@
     }
   }
 
-  wxLogError(_("Can't initialize zlib inflate stream."));
+  wxLogError("%s", _("Can't initialize zlib inflate stream."));
   m_lasterror = wxSTREAM_READ_ERROR;
 }
 
@@ -236,7 +236,7 @@
           m_lasterror = wxSTREAM_EOF;
         else
 #endif
-          wxLogError(_("Can't read inflate stream: unexpected EOF in underlying stream."));
+          wxLogError("%s", _("Can't read inflate stream: unexpected EOF in underlying stream."));
       break;
 
     default:
@@ -299,7 +299,7 @@
 
   // if gzip is asked for but not supported...
   if (flags == wxZLIB_GZIP && !CanHandleGZip()) {
-    wxLogError(_("Gzip not supported by this version of zlib"));
+    wxLogError("%s", _("Gzip not supported by this version of zlib"));
     m_lasterror = wxSTREAM_WRITE_ERROR;
     return;
   }
@@ -327,7 +327,7 @@
     }
   }
 
-  wxLogError(_("Can't initialize zlib deflate stream."));
+  wxLogError("%s", _("Can't initialize zlib deflate stream."));
   m_lasterror = wxSTREAM_WRITE_ERROR;
 }
 
--- wxWidgets-2.8.12/src/common/zipstrm.cpp.orig	2011-03-22 12:59:42.000000000 +0100
+++ wxWidgets-2.8.12/src/common/zipstrm.cpp	2012-09-30 09:49:19.005033098 +0200
@@ -525,7 +525,7 @@
     m_parent_o_stream = &stream;
 
     if (deflateReset(m_deflate) != Z_OK) {
-        wxLogError(_("can't re-initialize zlib deflate stream"));
+        wxLogError("%s", _("can't re-initialize zlib deflate stream"));
         m_lasterror = wxSTREAM_WRITE_ERROR;
         return false;
     }
@@ -550,7 +550,7 @@
     m_parent_i_stream = &stream;
 
     if (inflateReset(m_inflate) != Z_OK) {
-        wxLogError(_("can't re-initialize zlib inflate stream"));
+        wxLogError("%s", _("can't re-initialize zlib inflate stream"));
         m_lasterror = wxSTREAM_READ_ERROR;
         return false;
     }
@@ -1269,7 +1269,7 @@
 
     if (m_DiskNumber != 0 || m_StartDisk != 0 ||
             m_EntriesHere != m_TotalEntries)
-        wxLogWarning(_("assuming this is a multi-part zip concatenated"));
+        wxLogWarning("%s", _("assuming this is a multi-part zip concatenated"));
 
     return true;
 }
@@ -1441,7 +1441,7 @@
         // failed, so either this is a non-seekable stream (ok), or not a zip
         if (m_parentSeekable) {
             m_lasterror = wxSTREAM_READ_ERROR;
-            wxLogError(_("invalid zip file"));
+            wxLogError("%s", _("invalid zip file"));
             return false;
         }
         else {
@@ -1484,7 +1484,7 @@
         return true;
     }
 
-    wxLogError(_("can't find central directory in zip"));
+    wxLogError("%s", _("can't find central directory in zip"));
     m_lasterror = wxSTREAM_READ_ERROR;
     return false;
 }
@@ -1570,7 +1570,7 @@
         return wxSTREAM_EOF;
 
     if (m_signature != CENTRAL_MAGIC) {
-        wxLogError(_("error reading zip central directory"));
+        wxLogError("%s", _("error reading zip central directory"));
         return wxSTREAM_READ_ERROR;
     }
 
@@ -1661,7 +1661,7 @@
         }
     }
 
-    wxLogError(_("error reading zip local header"));
+    wxLogError("%s", _("error reading zip local header"));
     return wxSTREAM_READ_ERROR;
 }
 
@@ -1709,7 +1709,7 @@
                 == wxInvalidOffset)
             return false;
         if (ReadSignature() != LOCAL_MAGIC) {
-            wxLogError(_("bad zipfile offset to entry"));
+            wxLogError("%s", _("bad zipfile offset to entry"));
             return false;
         }
     }
@@ -1776,7 +1776,7 @@
     switch (m_entry.GetMethod()) {
         case wxZIP_METHOD_STORE:
             if (m_entry.GetSize() == wxInvalidOffset) {
-                wxLogError(_("stored file length not in Zip header"));
+                wxLogError("%s", _("stored file length not in Zip header"));
                 break;
             }
             m_store->Open(m_entry.GetSize());
@@ -1790,7 +1790,7 @@
             return m_inflate;
 
         default:
-            wxLogError(_("unsupported Zip compression method"));
+            wxLogError("%s", _("unsupported Zip compression method"));
     }
 
     return NULL;
@@ -2171,7 +2171,7 @@
         }
 
         default:
-            wxLogError(_("unsupported Zip compression method"));
+            wxLogError("%s", _("unsupported Zip compression method"));
     }
 
     return NULL;
--- wxWidgets-2.8.12/include/wx/unix/pipe.h.orig	2011-03-22 13:01:28.000000000 +0100
+++ wxWidgets-2.8.12/include/wx/unix/pipe.h	2012-09-30 09:52:41.701695539 +0200
@@ -44,7 +44,7 @@
     {
         if ( pipe(m_fds) == -1 )
         {
-            wxLogSysError(_("Pipe creation failed"));
+            wxLogSysError("%s", _("Pipe creation failed"));
 
             return FALSE;
         }
--- wxWidgets-2.8.12/src/unix/baseunix.cpp.orig	2011-03-22 13:01:28.000000000 +0100
+++ wxWidgets-2.8.12/src/unix/baseunix.cpp	2012-09-30 09:53:20.938361388 +0200
@@ -75,7 +75,7 @@
     int exitcode = 0;
     if ( waitpid(execData.pid, &exitcode, 0) == -1 || !WIFEXITED(exitcode) )
     {
-        wxLogSysError(_("Waiting for subprocess termination failed"));
+        wxLogSysError("%s", _("Waiting for subprocess termination failed"));
     }
 
     return exitcode;
--- wxWidgets-2.8.12/src/unix/snglinst.cpp.orig	2011-03-22 13:01:28.000000000 +0100
+++ wxWidgets-2.8.12/src/unix/snglinst.cpp	2012-09-30 10:01:41.101684296 +0200
@@ -267,7 +267,7 @@
         // another process managed to open and lock the file and terminate
         // (erasing it) before we got here, but this should happen so
         // rarely in practice that we don't care
-        wxLogError(_("Failed to access lock file."));
+        wxLogError("%s", _("Failed to access lock file."));
 
         return false;
     }
@@ -276,7 +276,7 @@
     ssize_t count = file.Read(buf, WXSIZEOF(buf));
     if ( count == wxInvalidOffset )
     {
-        wxLogError(_("Failed to read PID from lock file."));
+        wxLogError("%s", _("Failed to read PID from lock file."));
     }
     else
     {
--- wxWidgets-2.8.12/src/unix/threadpsx.cpp.orig	2011-03-22 13:01:28.000000000 +0100
+++ wxWidgets-2.8.12/src/unix/threadpsx.cpp	2012-09-30 10:06:25.185011707 +0200
@@ -729,7 +729,7 @@
     int rc = pthread_setspecific(gs_keySelf, thread);
     if ( rc != 0 )
     {
-        wxLogSysError(rc, _("Cannot start thread: error writing TLS"));
+        wxLogSysError(rc, "%s", _("Cannot start thread: error writing TLS"));
 
         return (void *)-1;
     }
@@ -907,7 +907,7 @@
                 // wxLogDebug: it is possible to bring the system to its knees
                 // by creating too many threads and not joining them quite
                 // easily
-                wxLogError(_("Failed to join a thread, potential memory leak detected - please restart the program"));
+                wxLogError("%s", _("Failed to join a thread, potential memory leak detected - please restart the program"));
             }
 
             m_shouldBeJoined = false;
@@ -1106,7 +1106,7 @@
     int policy;
     if ( pthread_attr_getschedpolicy(&attr, &policy) != 0 )
     {
-        wxLogError(_("Cannot retrieve thread scheduling policy."));
+        wxLogError("%s", _("Cannot retrieve thread scheduling policy."));
     }
 
 #ifdef __VMS__
@@ -1133,7 +1133,7 @@
         if ( prio != WXTHREAD_DEFAULT_PRIORITY )
         {
             // notify the programmer that this doesn't work here
-            wxLogWarning(_("Thread priority setting is ignored."));
+            wxLogWarning("%s", _("Thread priority setting is ignored."));
         }
         //else: we have default priority, so don't complain
 
@@ -1433,7 +1433,7 @@
             if ( pthread_cancel(m_internal->GetId()) != 0 )
 #endif // HAVE_PTHREAD_CANCEL
             {
-                wxLogError(_("Failed to terminate a thread."));
+                wxLogError("%s", _("Failed to terminate a thread."));
 
                 return wxTHREAD_MISC_ERROR;
             }
@@ -1615,7 +1615,7 @@
     int rc = pthread_key_create(&gs_keySelf, NULL /* dtor function */);
     if ( rc != 0 )
     {
-        wxLogSysError(rc, _("Thread module initialization failed: failed to create thread key"));
+        wxLogSysError(rc, "%s", _("Thread module initialization failed: failed to create thread key"));
 
         return false;
     }
--- wxWidgets-2.8.12/src/common/ftp.cpp.orig	2011-03-22 12:59:41.000000000 +0100
+++ wxWidgets-2.8.12/src/common/ftp.cpp	2012-09-30 10:18:44.061662974 +0200
@@ -628,7 +628,7 @@
     if ( !sockSrv->WaitForAccept() )
     {
         m_lastError = wxPROTO_CONNERR;
-        wxLogError(_("Timeout while waiting for FTP server to connect, try passive mode."));
+        wxLogError("%s", _("Timeout while waiting for FTP server to connect, try passive mode."));
         delete sock;
         sock = NULL;
     }
@@ -689,7 +689,7 @@
     {
         m_lastError = wxPROTO_PROTERR;
         delete sockSrv;
-        wxLogError(_("The FTP server doesn't support the PORT command."));
+        wxLogError("%s", _("The FTP server doesn't support the PORT command."));
         return NULL;
     }
 
@@ -701,7 +701,7 @@
 {
     if ( !DoSimpleCommand(_T("PASV")) )
     {
-        wxLogError(_("The FTP server doesn't support passive mode."));
+        wxLogError("%s", _("The FTP server doesn't support passive mode."));
         return NULL;
     }
 
--- wxWidgets-2.8.12/src/unix/utilsunx.cpp.orig	2011-03-22 13:01:28.000000000 +0100
+++ wxWidgets-2.8.12/src/unix/utilsunx.cpp	2012-09-30 10:28:09.194984528 +0200
@@ -432,7 +432,7 @@
     switch ( select(fd + 1, &readfds, NULL, NULL, &tv) )
     {
         case -1:
-            wxLogSysError(_("Impossible to get child process input"));
+            wxLogSysError("%s", _("Impossible to get child process input"));
             // fall through
 
         case 0:
@@ -543,7 +543,7 @@
 #endif
    if ( pid == -1 )     // error?
     {
-        wxLogSysError( _("Fork failed") );
+        wxLogSysError("%s", _("Fork failed") );
 
         ARGS_CLEANUP;
 
@@ -596,7 +596,7 @@
                  dup2(pipeOut[wxPipe::Write], STDOUT_FILENO) == -1 ||
                  dup2(pipeErr[wxPipe::Write], STDERR_FILENO) == -1 )
             {
-                wxLogSysError(_("Failed to redirect child process input/output"));
+                wxLogSysError("%s", _("Failed to redirect child process input/output"));
             }
 
             pipeIn.Close();
@@ -806,7 +806,7 @@
 
     if ( !ok )
     {
-        wxLogSysError(_("Cannot get the hostname"));
+        wxLogSysError("%s", _("Cannot get the hostname"));
     }
 
     return ok;
@@ -842,7 +842,7 @@
             struct hostent *host = gethostbyname(wxSafeConvertWX2MB(buf));
             if ( !host )
             {
-                wxLogSysError(_("Cannot get the official hostname"));
+                wxLogSysError("%s", _("Cannot get the official hostname"));
 
                 ok = false;
             }
--- wxWidgets-2.8.12/src/common/sckaddr.cpp.orig	2011-03-22 12:59:42.000000000 +0100
+++ wxWidgets-2.8.12/src/common/sckaddr.cpp	2012-09-30 10:54:15.261618553 +0200
@@ -141,7 +141,7 @@
   // Some people are sometimes fool.
   if (name.empty())
   {
-    wxLogWarning( _("Trying to solve a NULL hostname: giving up") );
+    wxLogWarning("%s", _("Trying to solve a NULL hostname: giving up") );
     return false;
   }
   m_origHostname = name;
--- wxWidgets-2.8.12/src/common/socket.cpp.orig	2011-03-22 12:59:42.000000000 +0100
+++ wxWidgets-2.8.12/src/common/socket.cpp	2012-09-30 10:58:04.798280436 +0200
@@ -409,7 +409,7 @@
 
   if (sig != 0xfeeddead)
   {
-    wxLogWarning(_("wxSocket: invalid signature in ReadMsg."));
+    wxLogWarning("%s", _("wxSocket: invalid signature in ReadMsg."));
     goto exit;
   }
 
@@ -463,7 +463,7 @@
 
   if (sig != 0xdeadfeed)
   {
-    wxLogWarning(_("wxSocket: invalid signature in ReadMsg."));
+    wxLogWarning("%s", _("wxSocket: invalid signature in ReadMsg."));
     goto exit;
   }
 
@@ -990,7 +990,7 @@
     case GSOCK_CONNECTION: flag = GSOCK_CONNECTION_FLAG; break;
     case GSOCK_LOST:       flag = GSOCK_LOST_FLAG; break;
     default:
-      wxLogWarning(_("wxSocket: unknown event!."));
+      wxLogWarning("%s", _("wxSocket: unknown event!."));
       return;
   }
 
--- wxWidgets-2.8.12/src/unix/displayx11.cpp.orig	2011-03-22 13:01:28.000000000 +0100
+++ wxWidgets-2.8.12/src/unix/displayx11.cpp	2012-09-30 15:55:56.814574597 +0200
@@ -208,7 +208,7 @@
     }
     else //OOPS!
     {
-        wxLogSysError(_("Failed to enumerate video modes"));
+        wxLogSysError("%s", _("Failed to enumerate video modes"));
     }
 
     return Modes;
@@ -231,7 +231,7 @@
 
     if( !XF86VidModeGetAllModeLines((Display*)wxGetDisplay(), DefaultScreen((Display*)wxGetDisplay()), &nNumModes, &ppXModes) )
     {
-        wxLogSysError(_("Failed to change video mode"));
+        wxLogSysError("%s", _("Failed to change video mode"));
         return false;
     }
 
--- wxWidgets-2.8.12/src/unix/dialup.cpp.orig	2011-03-22 13:01:28.000000000 +0100
+++ wxWidgets-2.8.12/src/unix/dialup.cpp	2012-09-30 15:56:29.271240585 +0200
@@ -353,7 +353,7 @@
         return false;
     if(IsDialing())
     {
-        wxLogError(_("Already dialling ISP."));
+        wxLogError("%s", _("Already dialling ISP."));
         return false;
     }
     wxString cmd;
--- wxWidgets-2.8.12/src/gtk/textctrl.cpp.orig	2011-03-22 13:01:32.000000000 +0100
+++ wxWidgets-2.8.12/src/gtk/textctrl.cpp	2012-09-30 16:21:18.987876200 +0200
@@ -1015,7 +1015,7 @@
     {
         // see comment in WriteText() as to why we must warn the user about
         // this
-        wxLogWarning(_("Failed to set text in the text control."));
+        wxLogWarning("%s", _("Failed to set text in the text control."));
         return;
     }
 
@@ -1072,7 +1072,7 @@
         // we must log an error here as losing the text like this can be a
         // serious problem (e.g. imagine the document edited by user being
         // empty instead of containing the correct text)
-        wxLogWarning(_("Failed to insert text in the control."));
+        wxLogWarning("%s", _("Failed to insert text in the control."));
         return;
     }
 
--- wxWidgets-2.8.12/src/common/docview.cpp.orig	2011-03-22 12:59:40.000000000 +0100
+++ wxWidgets-2.8.12/src/common/docview.cpp	2012-09-30 16:43:04.191182329 +0200
@@ -612,7 +612,7 @@
             return true;
     }
 
-    wxLogError(_("Sorry, could not open this file."));
+    wxLogError("%s", _("Sorry, could not open this file."));
     return false;
 }
 
--- wxWidgets-2.8.12/src/common/fontmap.cpp.orig	2011-03-22 12:59:41.000000000 +0100
+++ wxWidgets-2.8.12/src/common/fontmap.cpp	2012-09-30 16:47:20.114510328 +0200
@@ -320,7 +320,7 @@
     // message
     if ( encoding == wxFONTENCODING_SYSTEM )
     {
-        wxLogFatalError(_("can't load any font, aborting"));
+        wxLogFatalError("%s", _("can't load any font, aborting"));
 
         // wxLogFatalError doesn't return
     }
--- wxWidgets-2.8.12/src/common/imagbmp.cpp.orig	2011-03-22 12:59:41.000000000 +0100
+++ wxWidgets-2.8.12/src/common/imagbmp.cpp	2012-09-30 16:57:19.711164497 +0200
@@ -88,7 +88,7 @@
     if ( !image->Ok() )
     {
         if ( verbose )
-            wxLogError(_("BMP: Couldn't save invalid image."));
+            wxLogError("%s", _("BMP: Couldn't save invalid image."));
         return false;
     }
 
@@ -122,7 +122,7 @@
             )
         {
             if ( verbose )
-                wxLogError(_("BMP: wxImage doesn't have own wxPalette."));
+                wxLogError("%s", _("BMP: wxImage doesn't have own wxPalette."));
             return false;
         }
         bpp = 8;
@@ -197,7 +197,7 @@
            )
         {
             if (verbose)
-                wxLogError(_("BMP: Couldn't write the file (Bitmap) header."));
+                wxLogError("%s", _("BMP: Couldn't write the file (Bitmap) header."));
             return false;
         }
     }
@@ -218,7 +218,7 @@
            )
         {
             if (verbose)
-                wxLogError(_("BMP: Couldn't write the file (BitmapInfo) header."));
+                wxLogError("%s", _("BMP: Couldn't write the file (BitmapInfo) header."));
             return false;
         }
     }
@@ -292,7 +292,7 @@
             if ( !stream.Write(rgbquad, palette_size*4) )
             {
                 if (verbose)
-                    wxLogError(_("BMP: Couldn't write RGB color map."));
+                    wxLogError("%s", _("BMP: Couldn't write RGB color map."));
                 delete[] rgbquad;
 #if wxUSE_PALETTE
                 delete palette;
@@ -425,7 +425,7 @@
         if ( !stream.Write(buffer, row_width) )
         {
             if (verbose)
-                wxLogError(_("BMP: Couldn't write data."));
+                wxLogError("%s", _("BMP: Couldn't write data."));
             delete[] buffer;
 #if wxUSE_PALETTE
             delete palette;
@@ -471,7 +471,7 @@
         if ( !cmap )
         {
             if (verbose)
-                wxLogError(_("BMP: Couldn't allocate memory."));
+                wxLogError("%s", _("BMP: Couldn't allocate memory."));
             return false;
         }
     }
@@ -487,7 +487,7 @@
     if ( !ptr )
     {
         if ( verbose )
-            wxLogError( _("BMP: Couldn't allocate memory.") );
+            wxLogError("%s", _("BMP: Couldn't allocate memory.") );
         delete[] cmap;
         return false;
     }
@@ -501,7 +501,7 @@
         if ( !alpha )
         {
             if ( verbose )
-                wxLogError(_("BMP: Couldn't allocate memory."));
+                wxLogError("%s", _("BMP: Couldn't allocate memory."));
             delete[] cmap;
             return false;
         }
@@ -898,13 +898,13 @@
     if ( width > 32767 )
     {
         if (verbose)
-            wxLogError( _("DIB Header: Image width > 32767 pixels for file.") );
+            wxLogError("%s", _("DIB Header: Image width > 32767 pixels for file.") );
         return false;
     }
     if ( height > 32767 )
     {
         if (verbose)
-            wxLogError( _("DIB Header: Image height > 32767 pixels for file.") );
+            wxLogError("%s", _("DIB Header: Image height > 32767 pixels for file.") );
         return false;
     }
 
@@ -918,7 +918,7 @@
     if ( bpp != 1 && bpp != 4 && bpp != 8 && bpp != 16 && bpp != 24 && bpp != 32 )
     {
         if (verbose)
-            wxLogError( _("DIB Header: Unknown bitdepth in file.") );
+            wxLogError("%s", _("DIB Header: Unknown bitdepth in file.") );
         return false;
     }
 
@@ -928,7 +928,7 @@
          comp != BI_BITFIELDS )
     {
         if (verbose)
-            wxLogError( _("DIB Header: Unknown encoding in file.") );
+            wxLogError("%s", _("DIB Header: Unknown encoding in file.") );
         return false;
     }
 
@@ -942,7 +942,7 @@
         ((comp == BI_BITFIELDS) && (bpp != 16 && bpp != 32)))
     {
         if (verbose)
-            wxLogError( _("DIB Header: Encoding doesn't match bitdepth.") );
+            wxLogError("%s", _("DIB Header: Encoding doesn't match bitdepth.") );
         return false;
     }
 
@@ -951,7 +951,7 @@
                     verbose, IsBmp, true) )
     {
         if (verbose)
-            wxLogError( _("Error in reading image DIB.") );
+            wxLogError("%s", _("Error in reading image DIB.") );
         return false;
     }
 
@@ -964,7 +964,7 @@
                         verbose, IsBmp, false) )
         {
             if (verbose)
-                wxLogError( _("ICO: Error in reading mask DIB.") );
+                wxLogError("%s", _("ICO: Error in reading mask DIB.") );
             return false;
         }
         image->SetMaskFromImage(mask, 255, 255, 255);
@@ -1037,13 +1037,13 @@
     if ( image->GetHeight () > 127 )
     {
         if ( verbose )
-            wxLogError(_("ICO: Image too tall for an icon."));
+            wxLogError("%s", _("ICO: Image too tall for an icon."));
         return false;
     }
     if ( image->GetWidth () > 255 )
     {
         if ( verbose )
-            wxLogError(_("ICO: Image too wide for an icon."));
+            wxLogError("%s", _("ICO: Image too wide for an icon."));
         return false;
     }
 
@@ -1069,7 +1069,7 @@
     if ( !stream.IsOk() )
     {
         if ( verbose )
-            wxLogError(_("ICO: Error writing the image file!"));
+            wxLogError("%s", _("ICO: Error writing the image file!"));
         return false;
     }
 
@@ -1128,7 +1128,7 @@
         if ( !bResult )
         {
             if ( verbose )
-                wxLogError(_("ICO: Error writing the image file!"));
+                wxLogError("%s", _("ICO: Error writing the image file!"));
             return false;
         }
         IsMask = true;
@@ -1137,7 +1137,7 @@
         if ( !bResult )
         {
             if ( verbose )
-                wxLogError(_("ICO: Error writing the image file!"));
+                wxLogError("%s", _("ICO: Error writing the image file!"));
             return false;
         }
         wxUint32 Size = cStream.GetSize();
@@ -1192,7 +1192,7 @@
         if ( !stream.IsOk() )
         {
             if ( verbose )
-                wxLogError(_("ICO: Error writing the image file!"));
+                wxLogError("%s", _("ICO: Error writing the image file!"));
             return false;
         }
 
@@ -1202,7 +1202,7 @@
         if ( !bResult )
         {
             if ( verbose )
-                wxLogError(_("ICO: Error writing the image file!"));
+                wxLogError("%s", _("ICO: Error writing the image file!"));
             return false;
         }
         IsMask = true;
@@ -1211,7 +1211,7 @@
         if ( !bResult )
         {
             if ( verbose )
-                wxLogError(_("ICO: Error writing the image file!"));
+                wxLogError("%s", _("ICO: Error writing the image file!"));
             return false;
         }
 
@@ -1276,7 +1276,7 @@
 
     if ( iSel == wxNOT_FOUND || iSel < 0 || iSel >= nIcons )
     {
-        wxLogError(_("ICO: Invalid icon index."));
+        wxLogError("%s", _("ICO: Invalid icon index."));
         bResult = false;
     }
     else
--- wxWidgets-2.8.12/src/common/image.cpp.orig	2011-03-22 12:59:41.000000000 +0100
+++ wxWidgets-2.8.12/src/common/image.cpp	2012-09-30 16:59:23.204495257 +0200
@@ -1842,7 +1842,7 @@
     // check that the images are the same size
     if ( (M_IMGDATA->m_height != mask.GetHeight() ) || (M_IMGDATA->m_width != mask.GetWidth () ) )
     {
-        wxLogError( _("Image and mask have different sizes.") );
+        wxLogError("%s", _("Image and mask have different sizes.") );
         return false;
     }
 
@@ -1850,7 +1850,7 @@
     unsigned char r,g,b ;
     if (!FindFirstUnusedColour(&r, &g, &b))
     {
-        wxLogError( _("No unused colour in image being masked.") );
+        wxLogError("%s", _("No unused colour in image being masked.") );
         return false ;
     }
 
@@ -1891,7 +1891,7 @@
     unsigned char mr, mg, mb;
     if (!FindFirstUnusedColour(&mr, &mg, &mb))
     {
-        wxLogError( _("No unused colour in image being masked.") );
+        wxLogError("%s", _("No unused colour in image being masked.") );
         return false;
     }
 
@@ -2172,7 +2172,7 @@
 
         }
 
-        wxLogWarning(_("No handler found for image type."));
+        wxLogWarning("%s", _("No handler found for image type."));
         return 0;
     }
 
@@ -2215,7 +2215,7 @@
 
         }
 
-        wxLogWarning( _("No handler found for image type.") );
+        wxLogWarning("%s", _("No handler found for image type.") );
         return false;
     }
 
@@ -2696,7 +2696,7 @@
                 b2++;
                 if ( b2 >= 255 )
                 {
-                    wxLogError(_("No unused colour in image.") );
+                    wxLogError("%s",_("No unused colour in image.") );
                     return false;
                 }
             }
--- wxWidgets-2.8.12/src/common/imaggif.cpp.orig	2011-03-22 12:59:41.000000000 +0100
+++ wxWidgets-2.8.12/src/common/imaggif.cpp	2012-09-30 17:04:34.731155430 +0200
@@ -51,13 +51,13 @@
             switch (error)
             {
                 case wxGIF_INVFORMAT:
-                    wxLogError(_("GIF: error in GIF image format."));
+                    wxLogError("%s", _("GIF: error in GIF image format."));
                     break;
                 case wxGIF_MEMERR:
-                    wxLogError(_("GIF: not enough memory."));
+                    wxLogError("%s", _("GIF: not enough memory."));
                     break;
                 default:
-                    wxLogError(_("GIF: unknown error!!!"));
+                    wxLogError("%s", _("GIF: unknown error!!!"));
                     break;
             }
         }
@@ -67,7 +67,7 @@
 
     if ((error == wxGIF_TRUNCATED) && verbose)
     {
-        wxLogError(_("GIF: data stream seems to be truncated."));
+        wxLogError("%s", _("GIF: data stream seems to be truncated."));
         /* go on; image data is OK */
     }
 
@@ -77,7 +77,7 @@
     }
     else
     {
-        wxLogError(_("GIF: Invalid gif index."));
+        wxLogError("%s", _("GIF: Invalid gif index."));
     }
 
     delete decod;
--- wxWidgets-2.8.12/src/common/imagjpeg.cpp.orig	2011-03-22 12:59:41.000000000 +0100
+++ wxWidgets-2.8.12/src/common/imagjpeg.cpp	2012-09-30 18:17:01.807731491 +0200
@@ -247,7 +247,7 @@
        * We need to clean up the JPEG object, close the input file, and return.
        */
       if (verbose)
-        wxLogError(_("JPEG: Couldn't load - file is probably corrupted."));
+        wxLogError("%s", _("JPEG: Couldn't load - file is probably corrupted."));
       (cinfo.src->term_source)(&cinfo);
       jpeg_destroy_decompress(&cinfo);
       if (image->Ok()) image->Destroy();
@@ -390,7 +390,7 @@
          * We need to clean up the JPEG object, close the input file, and return.
          */
          if (verbose)
-            wxLogError(_("JPEG: Couldn't save image."));
+            wxLogError("%s", _("JPEG: Couldn't save image."));
          jpeg_destroy_compress(&cinfo);
          return false;
     }
--- wxWidgets-2.8.12/src/common/imagpcx.cpp.orig	2011-03-22 12:59:41.000000000 +0100
+++ wxWidgets-2.8.12/src/common/imagpcx.cpp	2012-09-30 18:19:28.711061763 +0200
@@ -439,7 +439,7 @@
     if (!CanRead(stream))
     {
         if (verbose)
-            wxLogError(_("PCX: this is not a PCX file."));
+            wxLogError("%s", _("PCX: this is not a PCX file."));
 
         return false;
     }
@@ -452,10 +452,10 @@
         {
             switch (error)
             {
-                case wxPCX_INVFORMAT: wxLogError(_("PCX: image format unsupported")); break;
-                case wxPCX_MEMERR:    wxLogError(_("PCX: couldn't allocate memory")); break;
-                case wxPCX_VERERR:    wxLogError(_("PCX: version number too low")); break;
-                default:              wxLogError(_("PCX: unknown error !!!"));
+                case wxPCX_INVFORMAT: wxLogError("%s", _("PCX: image format unsupported")); break;
+                case wxPCX_MEMERR:    wxLogError("%s", _("PCX: couldn't allocate memory")); break;
+                case wxPCX_VERERR:    wxLogError("%s", _("PCX: version number too low")); break;
+                default:              wxLogError("%s", _("PCX: unknown error !!!"));
             }
         }
         image->Destroy();
@@ -475,9 +475,9 @@
         {
             switch (error)
             {
-                case wxPCX_INVFORMAT: wxLogError(_("PCX: invalid image")); break;
-                case wxPCX_MEMERR:    wxLogError(_("PCX: couldn't allocate memory")); break;
-                default:              wxLogError(_("PCX: unknown error !!!"));
+                case wxPCX_INVFORMAT: wxLogError("%s", _("PCX: invalid image")); break;
+                case wxPCX_MEMERR:    wxLogError("%s", _("PCX: couldn't allocate memory")); break;
+                default:              wxLogError("%s", _("PCX: unknown error !!!"));
             }
         }
     }
--- wxWidgets-2.8.12/src/common/imagpng.cpp.orig	2011-03-22 12:59:41.000000000 +0100
+++ wxWidgets-2.8.12/src/common/imagpng.cpp	2012-09-30 18:21:56.457725349 +0200
@@ -175,7 +175,7 @@
 {
     wxPNGInfoStruct *info = png_ptr ? WX_PNG_INFO(png_ptr) : NULL;
     if ( !info || info->verbose )
-        wxLogWarning( wxString::FromAscii(message) );
+        wxLogWarning("%s", message );
 }
 
 // from pngerror.c
@@ -293,7 +293,7 @@
 
     if ( !h.FindFirstUnusedColour(&rMask, &gMask, &bMask) )
     {
-        wxLogWarning(_("Too many colours in PNG, the image may be slightly blurred."));
+        wxLogWarning("%s", _("Too many colours in PNG, the image may be slightly blurred."));
 
         // use a fixed mask colour and we'll fudge
         // the real pixels with this colour (see
@@ -621,7 +621,7 @@
 
 error:
     if (verbose)
-       wxLogError(_("Couldn't load a PNG image - file is corrupted or not enough memory."));
+       wxLogError("%s", _("Couldn't load a PNG image - file is corrupted or not enough memory."));
 
     if ( image->Ok() )
     {
@@ -670,7 +670,7 @@
     if (!png_ptr)
     {
         if (verbose)
-           wxLogError(_("Couldn't save PNG image."));
+           wxLogError("%s", _("Couldn't save PNG image."));
         return false;
     }
 
@@ -679,7 +679,7 @@
     {
         png_destroy_write_struct( &png_ptr, (png_infopp)NULL );
         if (verbose)
-           wxLogError(_("Couldn't save PNG image."));
+           wxLogError("%s", _("Couldn't save PNG image."));
         return false;
     }
 
@@ -687,7 +687,7 @@
     {
         png_destroy_write_struct( &png_ptr, (png_infopp)NULL );
         if (verbose)
-           wxLogError(_("Couldn't save PNG image."));
+           wxLogError("%s", _("Couldn't save PNG image."));
         return false;
     }
 
--- wxWidgets-2.8.12/src/common/imagpnm.cpp.orig	2011-03-22 12:59:41.000000000 +0100
+++ wxWidgets-2.8.12/src/common/imagpnm.cpp	2012-09-30 18:26:48.461052596 +0200
@@ -69,7 +69,7 @@
         case wxT('5'): // RAW Grey
         case wxT('6'): break;
         default:
-            if (verbose) wxLogError(_("PNM: File format is not recognized."));
+            if (verbose) wxLogError("%s", _("PNM: File format is not recognized."));
             return false;
     }
 
@@ -85,7 +85,7 @@
     if (!ptr)
     {
         if (verbose)
-           wxLogError( _("PNM: Couldn't allocate memory.") );
+           wxLogError("%s",  _("PNM: Couldn't allocate memory.") );
         return false;
     }
 
@@ -103,7 +103,7 @@
             *ptr++=(unsigned char)value; // B
             if ( !buf_stream )
             {
-                if (verbose) wxLogError(_("PNM: File seems truncated."));
+                if (verbose) wxLogError("%s", _("PNM: File seems truncated."));
                 return false;
             }
         }
@@ -122,7 +122,7 @@
 
             if ( !buf_stream )
               {
-                if (verbose) wxLogError(_("PNM: File seems truncated."));
+                if (verbose) wxLogError("%s", _("PNM: File seems truncated."));
                 return false;
               }
           }
@@ -141,7 +141,7 @@
             *ptr++=value; // B
             if ( !buf_stream )
             {
-                if (verbose) wxLogError(_("PNM: File seems truncated."));
+                if (verbose) wxLogError("%s", _("PNM: File seems truncated."));
                 return false;
             }
         }
--- wxWidgets-2.8.12/src/common/imagtiff.cpp.orig	2011-03-22 12:59:41.000000000 +0100
+++ wxWidgets-2.8.12/src/common/imagtiff.cpp	2012-09-30 18:35:21.521041902 +0200
@@ -245,7 +245,7 @@
     if (!tif)
     {
         if (verbose)
-            wxLogError( _("TIFF: Error loading image.") );
+            wxLogError("%s", _("TIFF: Error loading image.") );
 
         return false;
     }
@@ -253,7 +253,7 @@
     if (!TIFFSetDirectory( tif, (tdir_t)index ))
     {
         if (verbose)
-            wxLogError( _("Invalid TIFF image index.") );
+            wxLogError("%s", _("Invalid TIFF image index.") );
 
         TIFFClose( tif );
 
@@ -280,7 +280,7 @@
     if ( bytesNeeded >= 4294967295U /* UINT32_MAX */ )
     {
         if ( verbose )
-            wxLogError( _("TIFF: Image size is abnormally big.") );
+            wxLogError("%s", _("TIFF: Image size is abnormally big.") );
 
         TIFFClose(tif);
 
@@ -292,7 +292,7 @@
     if (!raster)
     {
         if (verbose)
-            wxLogError( _("TIFF: Couldn't allocate memory.") );
+            wxLogError("%s", _("TIFF: Couldn't allocate memory.") );
 
         TIFFClose( tif );
 
@@ -303,7 +303,7 @@
     if (!image->Ok())
     {
         if (verbose)
-            wxLogError( _("TIFF: Couldn't allocate memory.") );
+            wxLogError("%s", _("TIFF: Couldn't allocate memory.") );
 
         _TIFFfree( raster );
         TIFFClose( tif );
@@ -317,7 +317,7 @@
     if (!TIFFReadRGBAImage( tif, w, h, raster, 0 ))
     {
         if (verbose)
-            wxLogError( _("TIFF: Error reading image.") );
+            wxLogError("%s", _("TIFF: Error reading image.") );
 
         _TIFFfree( raster );
         image->Destroy();
@@ -385,7 +385,7 @@
     if (!tif)
     {
         if (verbose)
-            wxLogError( _("TIFF: Error saving image.") );
+            wxLogError("%s", _("TIFF: Error saving image.") );
 
         return false;
     }
@@ -443,7 +443,7 @@
         if (!buf)
         {
             if (verbose)
-                wxLogError( _("TIFF: Couldn't allocate memory.") );
+                wxLogError("%s", _("TIFF: Couldn't allocate memory.") );
 
             TIFFClose( tif );
 
@@ -489,7 +489,7 @@
         if ( TIFFWriteScanline(tif, buf ? buf : ptr, (uint32)row, 0) < 0 )
         {
             if (verbose)
-                wxLogError( _("TIFF: Error writing image.") );
+                wxLogError("%s", _("TIFF: Error writing image.") );
 
             TIFFClose( tif );
             if (buf)
--- wxWidgets-2.8.12/src/common/textcmn.cpp.orig	2011-03-22 12:59:42.000000000 +0100
+++ wxWidgets-2.8.12/src/common/textcmn.cpp	2012-09-30 18:39:49.751036311 +0200
@@ -215,7 +215,7 @@
         }
     }
 
-    wxLogError(_("File couldn't be loaded."));
+    wxLogError("%s", _("File couldn't be loaded."));
 #endif // wxUSE_FFILE
 
     return false;
@@ -251,7 +251,7 @@
     }
 #endif // wxUSE_FFILE
 
-    wxLogError(_("The text couldn't be saved."));
+    wxLogError("%s", _("The text couldn't be saved."));
 
     return false;
 }
--- wxWidgets-2.8.12/src/common/wincmn.cpp.orig	2011-03-22 12:59:42.000000000 +0100
+++ wxWidgets-2.8.12/src/common/wincmn.cpp	2012-09-30 18:43:17.657698645 +0200
@@ -1552,7 +1552,7 @@
         wxValidator *validator = child->GetValidator();
         if ( validator && !validator->TransferToWindow() )
         {
-            wxLogWarning(_("Could not transfer data to window"));
+            wxLogWarning("%s", _("Could not transfer data to window"));
 #if wxUSE_LOG
             wxLog::FlushActive();
 #endif // wxUSE_LOG
--- wxWidgets-2.8.12/src/common/xpmdecod.cpp.orig	2011-03-22 12:59:42.000000000 +0100
+++ wxWidgets-2.8.12/src/common/xpmdecod.cpp	2012-09-30 18:44:05.621030978 +0200
@@ -680,7 +680,7 @@
                    &width, &height, &colors_cnt, &chars_per_pixel);
     if ( count != 4 || width * height * colors_cnt == 0 )
     {
-        wxLogError(_("XPM: incorrect header format!"));
+        wxLogError("%s", _("XPM: incorrect header format!"));
         return wxNullImage;
     }
 
@@ -792,7 +792,7 @@
             entry = clr_tbl.find(key);
             if ( entry == end )
             {
-                wxLogError(_("XPM: Malformed pixel data!"));
+                wxLogError("%s", _("XPM: Malformed pixel data!"));
 
                 // better return right now as otherwise we risk to flood the
                 // user with error messages as something seems to be seriously
--- wxWidgets-2.8.12/src/generic/dcpsg.cpp.orig	2011-03-22 12:59:43.000000000 +0100
+++ wxWidgets-2.8.12/src/generic/dcpsg.cpp	2012-09-30 18:47:32.884359991 +0200
@@ -1583,7 +1583,7 @@
 
         if (!m_pstream)
         {
-            wxLogError( _("Cannot open file for PostScript printing!"));
+            wxLogError("%s", _("Cannot open file for PostScript printing!"));
             m_ok = false;
             return false;
         }
--- wxWidgets-2.8.12/src/generic/logg.cpp.orig	2011-03-22 12:59:43.000000000 +0100
+++ wxWidgets-2.8.12/src/generic/logg.cpp	2012-09-30 19:07:07.851002168 +0200
@@ -572,7 +572,7 @@
         bOk = file.Close();
 
     if ( !bOk ) {
-        wxLogError(_("Can't save log contents to file."));
+        wxLogError("%s", _("Can't save log contents to file."));
     }
     else {
         wxLogStatus(this, _("Log saved to the file '%s'."), filename.c_str());
@@ -1023,7 +1023,7 @@
         ok = file.Close();
 
     if ( !ok )
-        wxLogError(_("Can't save log contents to file."));
+        wxLogError("%s", _("Can't save log contents to file."));
 #endif // wxUSE_FILEDLG
 }
 
--- wxWidgets-2.8.12/src/generic/printps.cpp.orig	2011-03-22 12:59:43.000000000 +0100
+++ wxWidgets-2.8.12/src/generic/printps.cpp	2012-09-30 19:41:36.954292375 +0200
@@ -178,7 +178,7 @@
         if (!printout->OnBeginDocument(m_printDialogData.GetFromPage(), m_printDialogData.GetToPage()))
         {
             wxEndBusyCursor();
-            wxLogError(_("Could not start printing."));
+            wxLogError("%s", _("Could not start printing."));
             sm_lastError = wxPRINTER_ERROR;
             break;
         }
--- wxWidgets-2.8.12/src/unix/sound.cpp.orig	2011-03-22 13:01:28.000000000 +0100
+++ wxWidgets-2.8.12/src/unix/sound.cpp	2012-09-30 20:03:09.254265441 +0200
@@ -490,7 +490,7 @@
     Free();
     if (!LoadWAV(data, size, true))
     {
-        wxLogError(_("Sound data are in unsupported format."));
+        wxLogError("%s", _("Sound data are in unsupported format."));
         return false;
     }
     return true;
--- wxWidgets-2.8.12/src/html/chm.cpp.orig	2011-03-22 12:59:44.000000000 +0100
+++ wxWidgets-2.8.12/src/html/chm.cpp	2012-09-30 20:31:12.494230355 +0200
@@ -798,7 +798,7 @@
 
     if ( GetProtocol(left) != _T("file") )
     {
-        wxLogError(_("CHM handler currently supports only local files!"));
+        wxLogError("%s", _("CHM handler currently supports only local files!"));
         return NULL;
     }
 
@@ -821,7 +821,7 @@
     if ( (index=right.Index(_T("//"))) != wxNOT_FOUND )
     {
         right=wxString(right.Mid(index+1));
-        wxLogWarning(_("Link contained '//', converted to absolute link."));
+        wxLogWarning("%s", _("Link contained '//', converted to absolute link."));
     }
 
     wxFileName leftFilename = wxFileSystem::URLToFileName(left);
@@ -859,7 +859,7 @@
 
     if ( GetProtocol(left) != _T("file") )
     {
-        wxLogError(_("CHM handler currently supports only local files!"));
+        wxLogError("%s", _("CHM handler currently supports only local files!"));
         return wxEmptyString;
     }
 
--- wxWidgets-2.8.12/src/html/helpwnd.cpp.orig	2011-03-22 12:59:44.000000000 +0100
+++ wxWidgets-2.8.12/src/html/helpwnd.cpp	2012-09-30 20:54:46.604200882 +0200
@@ -1553,7 +1553,7 @@
                 if (m_Printer == NULL)
                     m_Printer = new wxHtmlEasyPrinting(_("Help Printing"), this);
                 if (!m_HtmlWin->GetOpenedPage())
-                    wxLogWarning(_("Cannot print empty page."));
+                    wxLogWarning("%s", _("Cannot print empty page."));
                 else
                     m_Printer->PrintFile(m_HtmlWin->GetOpenedPage());
             }
--- wxWidgets-2.8.12/src/html/htmlpars.cpp.orig	2011-03-22 12:59:44.000000000 +0100
+++ wxWidgets-2.8.12/src/html/htmlpars.cpp	2012-09-30 20:58:05.014196745 +0200
@@ -382,7 +382,7 @@
 #endif // wxUSE_STL/!wxUSE_STL
         )
     {
-        wxLogWarning(_("Warning: attempt to remove HTML tag handler from empty stack."));
+        wxLogWarning("%s", _("Warning: attempt to remove HTML tag handler from empty stack."));
         return;
     }
     m_HandlersHash = *((wxHashTable*) first->GetData());
