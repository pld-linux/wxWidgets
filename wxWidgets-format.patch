--- wxWidgets-2.8.12/src/common/appbase.cpp.orig	2011-03-22 12:59:40.000000000 +0100
+++ wxWidgets-2.8.12/src/common/appbase.cpp	2012-09-30 08:02:00.981833952 +0200
@@ -424,7 +424,7 @@
         msg.Printf(_T("Mismatch between the program and library build versions detected.\nThe library used %s,\nand %s used %s."),
                    lib.c_str(), progName.c_str(), prog.c_str());
 
-        wxLogFatalError(msg.c_str());
+        wxLogFatalError("%s", msg.c_str());
 
         // normally wxLogFatalError doesn't return
         return false;
--- wxWidgets-2.8.12/src/common/fs_mem.cpp.orig	2011-03-22 12:59:41.000000000 +0100
+++ wxWidgets-2.8.12/src/common/fs_mem.cpp	2012-09-30 10:11:49.745004943 +0200
@@ -174,9 +174,7 @@
 
     if (m_Hash -> Get(filename) != NULL)
     {
-        wxString s;
-        s.Printf(_("Memory VFS already contains file '%s'!"), filename.c_str());
-        wxLogError(s);
+        wxLogError(_("Memory VFS already contains file '%s'!"), filename.c_str());
         return false;
     }
     else
@@ -226,9 +224,7 @@
     if (m_Hash == NULL ||
         m_Hash -> Get(filename) == NULL)
     {
-        wxString s;
-        s.Printf(_("Trying to remove file '%s' from memory VFS, but it is not loaded!"), filename.c_str());
-        wxLogError(s);
+        wxLogError(_("Trying to remove file '%s' from memory VFS, but it is not loaded!"), filename.c_str());
     }
 
     else
--- wxWidgets-2.8.12/src/common/file.cpp.orig	2011-03-22 12:59:40.000000000 +0100
+++ wxWidgets-2.8.12/src/common/file.cpp	2012-09-30 08:19:02.785145988 +0200
@@ -513,7 +513,7 @@
     if ( chmod( (const char*) m_strTemp.fn_str(), mode) == -1 )
     {
 #ifndef __OS2__
-        wxLogSysError(_("Failed to set temporary file permissions"));
+        wxLogSysError("%s", _("Failed to set temporary file permissions"));
 #endif
     }
 #endif // Unix
--- wxWidgets-2.8.12/src/common/fileconf.cpp.orig	2011-03-22 12:59:41.000000000 +0100
+++ wxWidgets-2.8.12/src/common/fileconf.cpp	2012-09-30 08:20:45.761810510 +0200
@@ -508,7 +508,7 @@
 
             if ( err != wxSTREAM_NO_ERROR && err != wxSTREAM_EOF )
             {
-                wxLogError(_("Error reading config options."));
+                wxLogError("%s", _("Error reading config options."));
                 break;
             }
         }
@@ -1043,7 +1043,7 @@
 
   if ( !file.IsOpened() )
   {
-    wxLogError(_("can't open user configuration file."));
+    wxLogError("%s", _("can't open user configuration file."));
     return false;
   }
 
@@ -1057,13 +1057,13 @@
 
   if ( !file.Write(filetext, *m_conv) )
   {
-    wxLogError(_("can't write user configuration file."));
+    wxLogError("%s", _("can't write user configuration file."));
     return false;
   }
 
   if ( !file.Commit() )
   {
-      wxLogError(_("Failed to update user configuration file."));
+      wxLogError("%s", _("Failed to update user configuration file."));
 
       return false;
   }
@@ -1090,7 +1090,7 @@
         wxCharBuffer buf(line.mb_str(conv));
         if ( !os.Write(buf, strlen(buf)) )
         {
-            wxLogError(_("Error saving user configuration data."));
+            wxLogError("%s", _("Error saving user configuration data."));
 
             return false;
         }
--- wxWidgets-2.8.12/src/common/filename.cpp.orig	2011-03-22 12:59:41.000000000 +0100
+++ wxWidgets-2.8.12/src/common/filename.cpp	2012-09-30 08:26:13.781803673 +0200
@@ -859,7 +859,7 @@
 
     if ( path.empty() )
     {
-        wxLogSysError(_("Failed to create a temporary file name"));
+        wxLogSysError("%s", _("Failed to create a temporary file name"));
     }
     else
     {
@@ -894,7 +894,7 @@
             //        fails, though of course it should be protected against
             //        possible infinite looping too.
 
-            wxLogError(_("Failed to open temporary file."));
+            wxLogError("%s", _("Failed to open temporary file."));
 
             path.clear();
         }
--- wxWidgets-2.8.12/src/common/filefn.cpp.orig	2011-03-22 12:59:41.000000000 +0100
+++ wxWidgets-2.8.12/src/common/filefn.cpp	2012-09-30 09:03:28.965090416 +0200
@@ -1513,7 +1513,7 @@
 
     if ( !ok )
     {
-        wxLogSysError(_("Failed to get the working directory"));
+        wxLogSysError("%s", _("Failed to get the working directory"));
 
         // VZ: the old code used to return "." on error which didn't make any
         //     sense at all to me - empty string is a better error indicator
--- wxWidgets-2.8.12/src/common/init.cpp.orig	2011-03-22 12:59:41.000000000 +0100
+++ wxWidgets-2.8.12/src/common/init.cpp	2012-09-30 09:06:52.951752832 +0200
@@ -237,7 +237,7 @@
 
     if ( !wxModule::InitializeModules() )
     {
-        wxLogError(_("Initialization failed in post init, aborting."));
+        wxLogError("%s", _("Initialization failed in post init, aborting."));
         return false;
     }
 
--- wxWidgets-2.8.12/src/common/stopwatch.cpp.orig	2011-03-22 12:59:42.000000000 +0100
+++ wxWidgets-2.8.12/src/common/stopwatch.cpp	2012-09-30 09:13:41.768410978 +0200
@@ -228,7 +228,7 @@
     if (( t0 != (time_t)-1 ) && ( t1 != (time_t)-1 ))
         return (long)difftime(t1, t0) + (60 * 60 * 24 * 4);
 
-    wxLogSysError(_("Failed to get the local system time"));
+    wxLogSysError("%s", _("Failed to get the local system time"));
     return -1;
 }
 
@@ -286,7 +286,7 @@
     }
     else
     {
-        wxLogError(_("wxGetTimeOfDay failed."));
+        wxLogError("%s", _("wxGetTimeOfDay failed."));
         return 0;
     }
 #elif defined(HAVE_FTIME)
--- wxWidgets-2.8.12/src/common/tarstrm.cpp.orig	2011-03-22 12:59:42.000000000 +0100
+++ wxWidgets-2.8.12/src/common/tarstrm.cpp	2012-09-30 09:40:58.075043539 +0200
@@ -790,7 +790,7 @@
     while (!done) {
         m_hdr->Read(*m_parent_i_stream);
         if (m_parent_i_stream->Eof())
-            wxLogError(_("incomplete header block in tar"));
+            wxLogError("%s", _("incomplete header block in tar"));
         if (!*m_parent_i_stream)
             return wxSTREAM_READ_ERROR;
         m_offset += TAR_BLOCKSIZE;
@@ -813,7 +813,7 @@
         if (m_sumType == SUM_SIGNED)
             ok = chksum == m_hdr->Sum(true);
         if (!ok) {
-            wxLogError(_("checksum failure reading tar header block"));
+            wxLogError("%s", _("checksum failure reading tar header block"));
             return wxSTREAM_READ_ERROR;
         }
 
@@ -986,7 +986,7 @@
     }
 
     if (!ok || recPos < len || size != lastread) {
-        wxLogWarning(_("invalid data in extended tar header"));
+        wxLogWarning("%s", _("invalid data in extended tar header"));
         return false;
     }
 
@@ -996,7 +996,7 @@
 wxFileOffset wxTarInputStream::OnSysSeek(wxFileOffset pos, wxSeekMode mode)
 {
     if (!IsOpened()) {
-        wxLogError(_("tar entry not open"));
+        wxLogError("%s", _("tar entry not open"));
         m_lasterror = wxSTREAM_READ_ERROR;
     }
     if (!IsOk())
@@ -1018,7 +1018,7 @@
 size_t wxTarInputStream::OnSysRead(void *buffer, size_t size)
 {
     if (!IsOpened()) {
-        wxLogError(_("tar entry not open"));
+        wxLogError("%s", _("tar entry not open"));
         m_lasterror = wxSTREAM_READ_ERROR;
     }
     if (!IsOk() || !size)
@@ -1037,7 +1037,7 @@
     } else if (!m_parent_i_stream->IsOk()) {
         // any other error will have been reported by the underlying stream
         if (m_parent_i_stream->Eof())
-            wxLogError(_("unexpected end of file"));
+            wxLogError("%s", _("unexpected end of file"));
         m_lasterror = wxSTREAM_READ_ERROR;
     }
 
@@ -1371,7 +1371,7 @@
     }
 
     if (sizePos == wxInvalidOffset || !m_hdr->SetOctal(TAR_SIZE, m_pos)) {
-        wxLogError(_("incorrect size given for tar entry"));
+        wxLogError("%s", _("incorrect size given for tar entry"));
         m_lasterror = wxSTREAM_WRITE_ERROR;
         return false;
     }
@@ -1492,7 +1492,7 @@
 wxFileOffset wxTarOutputStream::OnSysSeek(wxFileOffset pos, wxSeekMode mode)
 {
     if (!IsOpened()) {
-        wxLogError(_("tar entry not open"));
+        wxLogError("%s", _("tar entry not open"));
         m_lasterror = wxSTREAM_WRITE_ERROR;
     }
     if (!IsOk() || m_datapos == wxInvalidOffset)
@@ -1514,7 +1514,7 @@
 size_t wxTarOutputStream::OnSysWrite(const void *buffer, size_t size)
 {
     if (!IsOpened()) {
-        wxLogError(_("tar entry not open"));
+        wxLogError("%s", _("tar entry not open"));
         m_lasterror = wxSTREAM_WRITE_ERROR;
     }
     if (!IsOk() || !size)
--- wxWidgets-2.8.12/src/common/zstream.cpp.orig	2011-03-22 12:59:43.000000000 +0100
+++ wxWidgets-2.8.12/src/common/zstream.cpp	2012-09-30 09:47:40.141701824 +0200
@@ -146,7 +146,7 @@
       flags = wxZLIB_ZLIB;
     }
     else {
-      wxLogError(_("Gzip not supported by this version of zlib"));
+      wxLogError("%s", _("Gzip not supported by this version of zlib"));
       m_lasterror = wxSTREAM_READ_ERROR;
       return;
     }
@@ -173,7 +173,7 @@
     }
   }
 
-  wxLogError(_("Can't initialize zlib inflate stream."));
+  wxLogError("%s", _("Can't initialize zlib inflate stream."));
   m_lasterror = wxSTREAM_READ_ERROR;
 }
 
@@ -236,7 +236,7 @@
           m_lasterror = wxSTREAM_EOF;
         else
 #endif
-          wxLogError(_("Can't read inflate stream: unexpected EOF in underlying stream."));
+          wxLogError("%s", _("Can't read inflate stream: unexpected EOF in underlying stream."));
       break;
 
     default:
@@ -299,7 +299,7 @@
 
   // if gzip is asked for but not supported...
   if (flags == wxZLIB_GZIP && !CanHandleGZip()) {
-    wxLogError(_("Gzip not supported by this version of zlib"));
+    wxLogError("%s", _("Gzip not supported by this version of zlib"));
     m_lasterror = wxSTREAM_WRITE_ERROR;
     return;
   }
@@ -327,7 +327,7 @@
     }
   }
 
-  wxLogError(_("Can't initialize zlib deflate stream."));
+  wxLogError("%s", _("Can't initialize zlib deflate stream."));
   m_lasterror = wxSTREAM_WRITE_ERROR;
 }
 
--- wxWidgets-2.8.12/src/common/zipstrm.cpp.orig	2011-03-22 12:59:42.000000000 +0100
+++ wxWidgets-2.8.12/src/common/zipstrm.cpp	2012-09-30 09:49:19.005033098 +0200
@@ -525,7 +525,7 @@
     m_parent_o_stream = &stream;
 
     if (deflateReset(m_deflate) != Z_OK) {
-        wxLogError(_("can't re-initialize zlib deflate stream"));
+        wxLogError("%s", _("can't re-initialize zlib deflate stream"));
         m_lasterror = wxSTREAM_WRITE_ERROR;
         return false;
     }
@@ -550,7 +550,7 @@
     m_parent_i_stream = &stream;
 
     if (inflateReset(m_inflate) != Z_OK) {
-        wxLogError(_("can't re-initialize zlib inflate stream"));
+        wxLogError("%s", _("can't re-initialize zlib inflate stream"));
         m_lasterror = wxSTREAM_READ_ERROR;
         return false;
     }
@@ -1269,7 +1269,7 @@
 
     if (m_DiskNumber != 0 || m_StartDisk != 0 ||
             m_EntriesHere != m_TotalEntries)
-        wxLogWarning(_("assuming this is a multi-part zip concatenated"));
+        wxLogWarning("%s", _("assuming this is a multi-part zip concatenated"));
 
     return true;
 }
@@ -1441,7 +1441,7 @@
         // failed, so either this is a non-seekable stream (ok), or not a zip
         if (m_parentSeekable) {
             m_lasterror = wxSTREAM_READ_ERROR;
-            wxLogError(_("invalid zip file"));
+            wxLogError("%s", _("invalid zip file"));
             return false;
         }
         else {
@@ -1484,7 +1484,7 @@
         return true;
     }
 
-    wxLogError(_("can't find central directory in zip"));
+    wxLogError("%s", _("can't find central directory in zip"));
     m_lasterror = wxSTREAM_READ_ERROR;
     return false;
 }
@@ -1570,7 +1570,7 @@
         return wxSTREAM_EOF;
 
     if (m_signature != CENTRAL_MAGIC) {
-        wxLogError(_("error reading zip central directory"));
+        wxLogError("%s", _("error reading zip central directory"));
         return wxSTREAM_READ_ERROR;
     }
 
@@ -1661,7 +1661,7 @@
         }
     }
 
-    wxLogError(_("error reading zip local header"));
+    wxLogError("%s", _("error reading zip local header"));
     return wxSTREAM_READ_ERROR;
 }
 
@@ -1709,7 +1709,7 @@
                 == wxInvalidOffset)
             return false;
         if (ReadSignature() != LOCAL_MAGIC) {
-            wxLogError(_("bad zipfile offset to entry"));
+            wxLogError("%s", _("bad zipfile offset to entry"));
             return false;
         }
     }
@@ -1776,7 +1776,7 @@
     switch (m_entry.GetMethod()) {
         case wxZIP_METHOD_STORE:
             if (m_entry.GetSize() == wxInvalidOffset) {
-                wxLogError(_("stored file length not in Zip header"));
+                wxLogError("%s", _("stored file length not in Zip header"));
                 break;
             }
             m_store->Open(m_entry.GetSize());
@@ -1790,7 +1790,7 @@
             return m_inflate;
 
         default:
-            wxLogError(_("unsupported Zip compression method"));
+            wxLogError("%s", _("unsupported Zip compression method"));
     }
 
     return NULL;
@@ -2171,7 +2171,7 @@
         }
 
         default:
-            wxLogError(_("unsupported Zip compression method"));
+            wxLogError("%s", _("unsupported Zip compression method"));
     }
 
     return NULL;
--- wxWidgets-2.8.12/include/wx/unix/pipe.h.orig	2011-03-22 13:01:28.000000000 +0100
+++ wxWidgets-2.8.12/include/wx/unix/pipe.h	2012-09-30 09:52:41.701695539 +0200
@@ -44,7 +44,7 @@
     {
         if ( pipe(m_fds) == -1 )
         {
-            wxLogSysError(_("Pipe creation failed"));
+            wxLogSysError("%s", _("Pipe creation failed"));
 
             return FALSE;
         }
--- wxWidgets-2.8.12/src/unix/baseunix.cpp.orig	2011-03-22 13:01:28.000000000 +0100
+++ wxWidgets-2.8.12/src/unix/baseunix.cpp	2012-09-30 09:53:20.938361388 +0200
@@ -75,7 +75,7 @@
     int exitcode = 0;
     if ( waitpid(execData.pid, &exitcode, 0) == -1 || !WIFEXITED(exitcode) )
     {
-        wxLogSysError(_("Waiting for subprocess termination failed"));
+        wxLogSysError("%s", _("Waiting for subprocess termination failed"));
     }
 
     return exitcode;
--- wxWidgets-2.8.12/src/unix/snglinst.cpp.orig	2011-03-22 13:01:28.000000000 +0100
+++ wxWidgets-2.8.12/src/unix/snglinst.cpp	2012-09-30 10:01:41.101684296 +0200
@@ -267,7 +267,7 @@
         // another process managed to open and lock the file and terminate
         // (erasing it) before we got here, but this should happen so
         // rarely in practice that we don't care
-        wxLogError(_("Failed to access lock file."));
+        wxLogError("%s", _("Failed to access lock file."));
 
         return false;
     }
@@ -276,7 +276,7 @@
     ssize_t count = file.Read(buf, WXSIZEOF(buf));
     if ( count == wxInvalidOffset )
     {
-        wxLogError(_("Failed to read PID from lock file."));
+        wxLogError("%s", _("Failed to read PID from lock file."));
     }
     else
     {
--- wxWidgets-2.8.12/src/unix/threadpsx.cpp.orig	2011-03-22 13:01:28.000000000 +0100
+++ wxWidgets-2.8.12/src/unix/threadpsx.cpp	2012-09-30 10:06:25.185011707 +0200
@@ -729,7 +729,7 @@
     int rc = pthread_setspecific(gs_keySelf, thread);
     if ( rc != 0 )
     {
-        wxLogSysError(rc, _("Cannot start thread: error writing TLS"));
+        wxLogSysError(rc, "%s", _("Cannot start thread: error writing TLS"));
 
         return (void *)-1;
     }
@@ -907,7 +907,7 @@
                 // wxLogDebug: it is possible to bring the system to its knees
                 // by creating too many threads and not joining them quite
                 // easily
-                wxLogError(_("Failed to join a thread, potential memory leak detected - please restart the program"));
+                wxLogError("%s", _("Failed to join a thread, potential memory leak detected - please restart the program"));
             }
 
             m_shouldBeJoined = false;
@@ -1106,7 +1106,7 @@
     int policy;
     if ( pthread_attr_getschedpolicy(&attr, &policy) != 0 )
     {
-        wxLogError(_("Cannot retrieve thread scheduling policy."));
+        wxLogError("%s", _("Cannot retrieve thread scheduling policy."));
     }
 
 #ifdef __VMS__
@@ -1133,7 +1133,7 @@
         if ( prio != WXTHREAD_DEFAULT_PRIORITY )
         {
             // notify the programmer that this doesn't work here
-            wxLogWarning(_("Thread priority setting is ignored."));
+            wxLogWarning("%s", _("Thread priority setting is ignored."));
         }
         //else: we have default priority, so don't complain
 
@@ -1433,7 +1433,7 @@
             if ( pthread_cancel(m_internal->GetId()) != 0 )
 #endif // HAVE_PTHREAD_CANCEL
             {
-                wxLogError(_("Failed to terminate a thread."));
+                wxLogError("%s", _("Failed to terminate a thread."));
 
                 return wxTHREAD_MISC_ERROR;
             }
@@ -1615,7 +1615,7 @@
     int rc = pthread_key_create(&gs_keySelf, NULL /* dtor function */);
     if ( rc != 0 )
     {
-        wxLogSysError(rc, _("Thread module initialization failed: failed to create thread key"));
+        wxLogSysError(rc, "%s", _("Thread module initialization failed: failed to create thread key"));
 
         return false;
     }
--- wxWidgets-2.8.12/src/common/ftp.cpp.orig	2011-03-22 12:59:41.000000000 +0100
+++ wxWidgets-2.8.12/src/common/ftp.cpp	2012-09-30 10:18:44.061662974 +0200
@@ -628,7 +628,7 @@
     if ( !sockSrv->WaitForAccept() )
     {
         m_lastError = wxPROTO_CONNERR;
-        wxLogError(_("Timeout while waiting for FTP server to connect, try passive mode."));
+        wxLogError("%s", _("Timeout while waiting for FTP server to connect, try passive mode."));
         delete sock;
         sock = NULL;
     }
@@ -689,7 +689,7 @@
     {
         m_lastError = wxPROTO_PROTERR;
         delete sockSrv;
-        wxLogError(_("The FTP server doesn't support the PORT command."));
+        wxLogError("%s", _("The FTP server doesn't support the PORT command."));
         return NULL;
     }
 
@@ -701,7 +701,7 @@
 {
     if ( !DoSimpleCommand(_T("PASV")) )
     {
-        wxLogError(_("The FTP server doesn't support passive mode."));
+        wxLogError("%s", _("The FTP server doesn't support passive mode."));
         return NULL;
     }
 
--- wxWidgets-2.8.12/src/unix/utilsunx.cpp.orig	2011-03-22 13:01:28.000000000 +0100
+++ wxWidgets-2.8.12/src/unix/utilsunx.cpp	2012-09-30 10:28:09.194984528 +0200
@@ -432,7 +432,7 @@
     switch ( select(fd + 1, &readfds, NULL, NULL, &tv) )
     {
         case -1:
-            wxLogSysError(_("Impossible to get child process input"));
+            wxLogSysError("%s", _("Impossible to get child process input"));
             // fall through
 
         case 0:
@@ -543,7 +543,7 @@
 #endif
    if ( pid == -1 )     // error?
     {
-        wxLogSysError( _("Fork failed") );
+        wxLogSysError("%s", _("Fork failed") );
 
         ARGS_CLEANUP;
 
@@ -596,7 +596,7 @@
                  dup2(pipeOut[wxPipe::Write], STDOUT_FILENO) == -1 ||
                  dup2(pipeErr[wxPipe::Write], STDERR_FILENO) == -1 )
             {
-                wxLogSysError(_("Failed to redirect child process input/output"));
+                wxLogSysError("%s", _("Failed to redirect child process input/output"));
             }
 
             pipeIn.Close();
@@ -806,7 +806,7 @@
 
     if ( !ok )
     {
-        wxLogSysError(_("Cannot get the hostname"));
+        wxLogSysError("%s", _("Cannot get the hostname"));
     }
 
     return ok;
@@ -842,7 +842,7 @@
             struct hostent *host = gethostbyname(wxSafeConvertWX2MB(buf));
             if ( !host )
             {
-                wxLogSysError(_("Cannot get the official hostname"));
+                wxLogSysError("%s", _("Cannot get the official hostname"));
 
                 ok = false;
             }
